package com.ypitta.MultiZoneClimateControl.gateway_device.service;

import java.util.Properties;
import java.util.logging.Logger;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import neu.ypitta.connecteddevices.common.*;
/*
 *  This class connects to a mail server and sends the mail.
    publishMessage() method sends the email, it takes in two parameters. (Subject, message)
 */
public class SmtpClientConnector {

	private String host = "not set";
	private String port = "not set";
	private String fromAddr = "not set";
	private	String toAddr = "not set";
	private String authToken = "not set";
	private Properties props;
	
	public SmtpClientConnector() {
		super();
		ConfigUtil conf = new ConfigUtil();
		this.host = conf.getValue(ConfigConst.SMTP_CONF, ConfigConst.SMTP_HOST);
		this.port = conf.getValue(ConfigConst.SMTP_CONF, ConfigConst.SMTP_PORT);
		this.fromAddr = conf.getValue(ConfigConst.SMTP_CONF, ConfigConst.SMTP_FROM_ADDR);
		this.toAddr = conf.getValue(ConfigConst.SMTP_CONF, ConfigConst.SMTP_TO_ADDR);
		this.authToken = conf.getValue(ConfigConst.SMTP_CONF, ConfigConst.SMTP_AUTH_TOKEN);
		
		this.props = System.getProperties();
//		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", this.host);
		props.put("mail.smtp.user", this.fromAddr);
		props.put("mail.smtp.password", this.authToken);
		props.put("mail.smtp.port", this.port);
		props.put("mail.smtp.socketFactory.port", this.port);
	    props.put("mail.smtp.socketFactory.class",
	            "javax.net.ssl.SSLSocketFactory");
		props.put("mail.smtp.auth", "true");
		// TODO Auto-generated constructor stub
	}
	
	public boolean publishMessage(String sub, String msg) {
		Session session = Session.getDefaultInstance(this.props);
		MimeMessage message = new MimeMessage(session);
		
		try {
			message.setFrom(new InternetAddress(this.fromAddr));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(this.toAddr));
			message.setSubject(sub);
			message.setText(msg);
			Transport trans = session.getTransport("smtp");
			trans.connect(this.host, this.fromAddr, this.authToken);
			trans.sendMessage(message, message.getAllRecipients());
			Logger.getGlobal().info("\nMail Successfully sent");
			trans.close();
			return true;
			}
		catch (AddressException e) {
			e.printStackTrace();
			return false;
		}
		catch (MessagingException e) {
			e.printStackTrace();
			return false;
		}
	}
}
